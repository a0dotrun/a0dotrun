/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as AuthIndexRouteImport } from './routes/_auth/index'
import { Route as LoginSplatRouteImport } from './routes/login.$'
import { Route as GithubInstalledRouteImport } from './routes/github/installed'
import { Route as ApiSyncV1RouteImport } from './routes/api/sync/v1'
import { Route as ApiGithubReposRouteImport } from './routes/api/github.repos'
import { Route as ApiGithubInstallsRouteImport } from './routes/api/github.installs'
import { Route as ApiGithubCallbackRouteImport } from './routes/api/github.callback'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'
import { Route as AuthUsersUsernameRouteImport } from './routes/_auth/users.$username'
import { Route as AuthUsernameDashRouteRouteImport } from './routes/_auth/$username/_dash/route'
import { Route as AuthUsernameDashIndexRouteImport } from './routes/_auth/$username/_dash/index'
import { Route as AuthUsernameDashDeploymentsRouteImport } from './routes/_auth/$username/_dash/deployments'
import { Route as AuthUsernameDeploymentsDeploymentIdRouteRouteImport } from './routes/_auth/$username/deployments.$deploymentId/route'
import { Route as AuthUsernameDashSettingsRouteRouteImport } from './routes/_auth/$username/_dash/settings/route'
import { Route as AuthUsernameDeploymentsDeploymentIdIndexRouteImport } from './routes/_auth/$username/deployments.$deploymentId/index'
import { Route as AuthUsernameDashSettingsIndexRouteImport } from './routes/_auth/$username/_dash/settings/index'
import { Route as AuthUsernameDashDeploymentsIndexRouteImport } from './routes/_auth/$username/_dash/deployments.index'
import { Route as ApiServersUsernameNameReadmeRouteImport } from './routes/api/servers/$username.$name.readme'
import { Route as AuthUsernameDeploymentsDeploymentIdLogsRouteImport } from './routes/_auth/$username/deployments.$deploymentId/logs'
import { Route as AuthUsernameDashSettingsWebhooksRouteImport } from './routes/_auth/$username/_dash/settings/webhooks'
import { Route as AuthUsernameDashSettingsGithubRouteImport } from './routes/_auth/$username/_dash/settings/github'
import { Route as AuthUsernameDashServersNewRouteImport } from './routes/_auth/$username/_dash/servers/new'
import { Route as AuthUsernameDashServersImportRouteImport } from './routes/_auth/$username/_dash/servers/import'
import { Route as AuthUsernameDashDeploymentsProductionRouteImport } from './routes/_auth/$username/_dash/deployments.production'
import { Route as AuthUsernameDashDeploymentsPreviewRouteImport } from './routes/_auth/$username/_dash/deployments.preview'
import { Route as AuthUsernameDashServersListRouteRouteImport } from './routes/_auth/$username/_dash/servers/_list/route'
import { Route as AuthUsernameDashServersListIndexRouteImport } from './routes/_auth/$username/_dash/servers/_list/index'
import { Route as AuthUsernameServersOwnerNameDeployRouteImport } from './routes/_auth/$username/servers/$owner/$name/deploy'
import { Route as AuthUsernameDashServersListPublicRouteImport } from './routes/_auth/$username/_dash/servers/_list/public'
import { Route as AuthUsernameDashServersListPrivateRouteImport } from './routes/_auth/$username/_dash/servers/_list/private'
import { Route as AuthUsernameServersOwnerNameServerRouteRouteImport } from './routes/_auth/$username/servers/$owner/$name/_server/route'
import { Route as AuthUsernameServersOwnerNameDeployIndexRouteImport } from './routes/_auth/$username/servers/$owner/$name/deploy.index'
import { Route as AuthUsernameServersOwnerNameServerIndexRouteImport } from './routes/_auth/$username/servers/$owner/$name/_server/index'
import { Route as AuthUsernameServersOwnerNameServerSettingsRouteImport } from './routes/_auth/$username/servers/$owner/$name/_server/settings'
import { Route as AuthUsernameServersOwnerNameServerReadmeRouteImport } from './routes/_auth/$username/servers/$owner/$name/_server/readme'
import { Route as AuthUsernameServersOwnerNameServerDeploymentsRouteImport } from './routes/_auth/$username/servers/$owner/$name/_server/deployments'
import { Route as AuthUsernameServersOwnerNameServerAnalyticsRouteImport } from './routes/_auth/$username/servers/$owner/$name/_server/analytics'
import { Route as AuthUsernameServersOwnerNameServerDeploymentsIndexRouteImport } from './routes/_auth/$username/servers/$owner/$name/_server/deployments.index'
import { Route as AuthUsernameServersOwnerNameServerDeploymentsProductionRouteImport } from './routes/_auth/$username/servers/$owner/$name/_server/deployments.production'
import { Route as AuthUsernameServersOwnerNameServerDeploymentsPreviewRouteImport } from './routes/_auth/$username/servers/$owner/$name/_server/deployments.preview'

const AuthUsernameRouteImport = createFileRoute('/_auth/$username')()
const AuthUsernameDashServersRouteImport = createFileRoute(
  '/_auth/$username/_dash/servers',
)()
const AuthUsernameServersOwnerNameRouteImport = createFileRoute(
  '/_auth/$username/servers/$owner/$name',
)()

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthUsernameRoute = AuthUsernameRouteImport.update({
  id: '/$username',
  path: '/$username',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRouteRoute,
} as any)
const LoginSplatRoute = LoginSplatRouteImport.update({
  id: '/login/$',
  path: '/login/$',
  getParentRoute: () => rootRouteImport,
} as any)
const GithubInstalledRoute = GithubInstalledRouteImport.update({
  id: '/github/installed',
  path: '/github/installed',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSyncV1Route = ApiSyncV1RouteImport.update({
  id: '/api/sync/v1',
  path: '/api/sync/v1',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiGithubReposRoute = ApiGithubReposRouteImport.update({
  id: '/api/github/repos',
  path: '/api/github/repos',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiGithubInstallsRoute = ApiGithubInstallsRouteImport.update({
  id: '/api/github/installs',
  path: '/api/github/installs',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiGithubCallbackRoute = ApiGithubCallbackRouteImport.update({
  id: '/api/github/callback',
  path: '/api/github/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthUsersUsernameRoute = AuthUsersUsernameRouteImport.update({
  id: '/users/$username',
  path: '/users/$username',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthUsernameDashRouteRoute = AuthUsernameDashRouteRouteImport.update({
  id: '/_dash',
  getParentRoute: () => AuthUsernameRoute,
} as any)
const AuthUsernameDashServersRoute = AuthUsernameDashServersRouteImport.update({
  id: '/servers',
  path: '/servers',
  getParentRoute: () => AuthUsernameDashRouteRoute,
} as any)
const AuthUsernameDashIndexRoute = AuthUsernameDashIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthUsernameDashRouteRoute,
} as any)
const AuthUsernameDashDeploymentsRoute =
  AuthUsernameDashDeploymentsRouteImport.update({
    id: '/deployments',
    path: '/deployments',
    getParentRoute: () => AuthUsernameDashRouteRoute,
  } as any)
const AuthUsernameDeploymentsDeploymentIdRouteRoute =
  AuthUsernameDeploymentsDeploymentIdRouteRouteImport.update({
    id: '/deployments/$deploymentId',
    path: '/deployments/$deploymentId',
    getParentRoute: () => AuthUsernameRoute,
  } as any)
const AuthUsernameDashSettingsRouteRoute =
  AuthUsernameDashSettingsRouteRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthUsernameDashRouteRoute,
  } as any)
const AuthUsernameServersOwnerNameRoute =
  AuthUsernameServersOwnerNameRouteImport.update({
    id: '/servers/$owner/$name',
    path: '/servers/$owner/$name',
    getParentRoute: () => AuthUsernameRoute,
  } as any)
const AuthUsernameDeploymentsDeploymentIdIndexRoute =
  AuthUsernameDeploymentsDeploymentIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthUsernameDeploymentsDeploymentIdRouteRoute,
  } as any)
const AuthUsernameDashSettingsIndexRoute =
  AuthUsernameDashSettingsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthUsernameDashSettingsRouteRoute,
  } as any)
const AuthUsernameDashDeploymentsIndexRoute =
  AuthUsernameDashDeploymentsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthUsernameDashDeploymentsRoute,
  } as any)
const ApiServersUsernameNameReadmeRoute =
  ApiServersUsernameNameReadmeRouteImport.update({
    id: '/api/servers/$username/$name/readme',
    path: '/api/servers/$username/$name/readme',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthUsernameDeploymentsDeploymentIdLogsRoute =
  AuthUsernameDeploymentsDeploymentIdLogsRouteImport.update({
    id: '/logs',
    path: '/logs',
    getParentRoute: () => AuthUsernameDeploymentsDeploymentIdRouteRoute,
  } as any)
const AuthUsernameDashSettingsWebhooksRoute =
  AuthUsernameDashSettingsWebhooksRouteImport.update({
    id: '/webhooks',
    path: '/webhooks',
    getParentRoute: () => AuthUsernameDashSettingsRouteRoute,
  } as any)
const AuthUsernameDashSettingsGithubRoute =
  AuthUsernameDashSettingsGithubRouteImport.update({
    id: '/github',
    path: '/github',
    getParentRoute: () => AuthUsernameDashSettingsRouteRoute,
  } as any)
const AuthUsernameDashServersNewRoute =
  AuthUsernameDashServersNewRouteImport.update({
    id: '/new',
    path: '/new',
    getParentRoute: () => AuthUsernameDashServersRoute,
  } as any)
const AuthUsernameDashServersImportRoute =
  AuthUsernameDashServersImportRouteImport.update({
    id: '/import',
    path: '/import',
    getParentRoute: () => AuthUsernameDashServersRoute,
  } as any)
const AuthUsernameDashDeploymentsProductionRoute =
  AuthUsernameDashDeploymentsProductionRouteImport.update({
    id: '/production',
    path: '/production',
    getParentRoute: () => AuthUsernameDashDeploymentsRoute,
  } as any)
const AuthUsernameDashDeploymentsPreviewRoute =
  AuthUsernameDashDeploymentsPreviewRouteImport.update({
    id: '/preview',
    path: '/preview',
    getParentRoute: () => AuthUsernameDashDeploymentsRoute,
  } as any)
const AuthUsernameDashServersListRouteRoute =
  AuthUsernameDashServersListRouteRouteImport.update({
    id: '/_list',
    getParentRoute: () => AuthUsernameDashServersRoute,
  } as any)
const AuthUsernameDashServersListIndexRoute =
  AuthUsernameDashServersListIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthUsernameDashServersListRouteRoute,
  } as any)
const AuthUsernameServersOwnerNameDeployRoute =
  AuthUsernameServersOwnerNameDeployRouteImport.update({
    id: '/deploy',
    path: '/deploy',
    getParentRoute: () => AuthUsernameServersOwnerNameRoute,
  } as any)
const AuthUsernameDashServersListPublicRoute =
  AuthUsernameDashServersListPublicRouteImport.update({
    id: '/public',
    path: '/public',
    getParentRoute: () => AuthUsernameDashServersListRouteRoute,
  } as any)
const AuthUsernameDashServersListPrivateRoute =
  AuthUsernameDashServersListPrivateRouteImport.update({
    id: '/private',
    path: '/private',
    getParentRoute: () => AuthUsernameDashServersListRouteRoute,
  } as any)
const AuthUsernameServersOwnerNameServerRouteRoute =
  AuthUsernameServersOwnerNameServerRouteRouteImport.update({
    id: '/_server',
    getParentRoute: () => AuthUsernameServersOwnerNameRoute,
  } as any)
const AuthUsernameServersOwnerNameDeployIndexRoute =
  AuthUsernameServersOwnerNameDeployIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthUsernameServersOwnerNameDeployRoute,
  } as any)
const AuthUsernameServersOwnerNameServerIndexRoute =
  AuthUsernameServersOwnerNameServerIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthUsernameServersOwnerNameServerRouteRoute,
  } as any)
const AuthUsernameServersOwnerNameServerSettingsRoute =
  AuthUsernameServersOwnerNameServerSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthUsernameServersOwnerNameServerRouteRoute,
  } as any)
const AuthUsernameServersOwnerNameServerReadmeRoute =
  AuthUsernameServersOwnerNameServerReadmeRouteImport.update({
    id: '/readme',
    path: '/readme',
    getParentRoute: () => AuthUsernameServersOwnerNameServerRouteRoute,
  } as any)
const AuthUsernameServersOwnerNameServerDeploymentsRoute =
  AuthUsernameServersOwnerNameServerDeploymentsRouteImport.update({
    id: '/deployments',
    path: '/deployments',
    getParentRoute: () => AuthUsernameServersOwnerNameServerRouteRoute,
  } as any)
const AuthUsernameServersOwnerNameServerAnalyticsRoute =
  AuthUsernameServersOwnerNameServerAnalyticsRouteImport.update({
    id: '/analytics',
    path: '/analytics',
    getParentRoute: () => AuthUsernameServersOwnerNameServerRouteRoute,
  } as any)
const AuthUsernameServersOwnerNameServerDeploymentsIndexRoute =
  AuthUsernameServersOwnerNameServerDeploymentsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthUsernameServersOwnerNameServerDeploymentsRoute,
  } as any)
const AuthUsernameServersOwnerNameServerDeploymentsProductionRoute =
  AuthUsernameServersOwnerNameServerDeploymentsProductionRouteImport.update({
    id: '/production',
    path: '/production',
    getParentRoute: () => AuthUsernameServersOwnerNameServerDeploymentsRoute,
  } as any)
const AuthUsernameServersOwnerNameServerDeploymentsPreviewRoute =
  AuthUsernameServersOwnerNameServerDeploymentsPreviewRouteImport.update({
    id: '/preview',
    path: '/preview',
    getParentRoute: () => AuthUsernameServersOwnerNameServerDeploymentsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/github/installed': typeof GithubInstalledRoute
  '/login/$': typeof LoginSplatRoute
  '/': typeof AuthIndexRoute
  '/$username': typeof AuthUsernameDashRouteRouteWithChildren
  '/users/$username': typeof AuthUsersUsernameRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/github/callback': typeof ApiGithubCallbackRoute
  '/api/github/installs': typeof ApiGithubInstallsRoute
  '/api/github/repos': typeof ApiGithubReposRoute
  '/api/sync/v1': typeof ApiSyncV1Route
  '/$username/settings': typeof AuthUsernameDashSettingsRouteRouteWithChildren
  '/$username/deployments/$deploymentId': typeof AuthUsernameDeploymentsDeploymentIdRouteRouteWithChildren
  '/$username/deployments': typeof AuthUsernameDashDeploymentsRouteWithChildren
  '/$username/': typeof AuthUsernameDashIndexRoute
  '/$username/servers': typeof AuthUsernameDashServersListRouteRouteWithChildren
  '/$username/deployments/preview': typeof AuthUsernameDashDeploymentsPreviewRoute
  '/$username/deployments/production': typeof AuthUsernameDashDeploymentsProductionRoute
  '/$username/servers/import': typeof AuthUsernameDashServersImportRoute
  '/$username/servers/new': typeof AuthUsernameDashServersNewRoute
  '/$username/settings/github': typeof AuthUsernameDashSettingsGithubRoute
  '/$username/settings/webhooks': typeof AuthUsernameDashSettingsWebhooksRoute
  '/$username/deployments/$deploymentId/logs': typeof AuthUsernameDeploymentsDeploymentIdLogsRoute
  '/api/servers/$username/$name/readme': typeof ApiServersUsernameNameReadmeRoute
  '/$username/deployments/': typeof AuthUsernameDashDeploymentsIndexRoute
  '/$username/settings/': typeof AuthUsernameDashSettingsIndexRoute
  '/$username/deployments/$deploymentId/': typeof AuthUsernameDeploymentsDeploymentIdIndexRoute
  '/$username/servers/$owner/$name': typeof AuthUsernameServersOwnerNameServerRouteRouteWithChildren
  '/$username/servers/private': typeof AuthUsernameDashServersListPrivateRoute
  '/$username/servers/public': typeof AuthUsernameDashServersListPublicRoute
  '/$username/servers/$owner/$name/deploy': typeof AuthUsernameServersOwnerNameDeployRouteWithChildren
  '/$username/servers/': typeof AuthUsernameDashServersListIndexRoute
  '/$username/servers/$owner/$name/analytics': typeof AuthUsernameServersOwnerNameServerAnalyticsRoute
  '/$username/servers/$owner/$name/deployments': typeof AuthUsernameServersOwnerNameServerDeploymentsRouteWithChildren
  '/$username/servers/$owner/$name/readme': typeof AuthUsernameServersOwnerNameServerReadmeRoute
  '/$username/servers/$owner/$name/settings': typeof AuthUsernameServersOwnerNameServerSettingsRoute
  '/$username/servers/$owner/$name/': typeof AuthUsernameServersOwnerNameServerIndexRoute
  '/$username/servers/$owner/$name/deploy/': typeof AuthUsernameServersOwnerNameDeployIndexRoute
  '/$username/servers/$owner/$name/deployments/preview': typeof AuthUsernameServersOwnerNameServerDeploymentsPreviewRoute
  '/$username/servers/$owner/$name/deployments/production': typeof AuthUsernameServersOwnerNameServerDeploymentsProductionRoute
  '/$username/servers/$owner/$name/deployments/': typeof AuthUsernameServersOwnerNameServerDeploymentsIndexRoute
}
export interface FileRoutesByTo {
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/github/installed': typeof GithubInstalledRoute
  '/login/$': typeof LoginSplatRoute
  '/': typeof AuthIndexRoute
  '/$username': typeof AuthUsernameDashIndexRoute
  '/users/$username': typeof AuthUsersUsernameRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/github/callback': typeof ApiGithubCallbackRoute
  '/api/github/installs': typeof ApiGithubInstallsRoute
  '/api/github/repos': typeof ApiGithubReposRoute
  '/api/sync/v1': typeof ApiSyncV1Route
  '/$username/servers': typeof AuthUsernameDashServersListIndexRoute
  '/$username/deployments/preview': typeof AuthUsernameDashDeploymentsPreviewRoute
  '/$username/deployments/production': typeof AuthUsernameDashDeploymentsProductionRoute
  '/$username/servers/import': typeof AuthUsernameDashServersImportRoute
  '/$username/servers/new': typeof AuthUsernameDashServersNewRoute
  '/$username/settings/github': typeof AuthUsernameDashSettingsGithubRoute
  '/$username/settings/webhooks': typeof AuthUsernameDashSettingsWebhooksRoute
  '/$username/deployments/$deploymentId/logs': typeof AuthUsernameDeploymentsDeploymentIdLogsRoute
  '/api/servers/$username/$name/readme': typeof ApiServersUsernameNameReadmeRoute
  '/$username/deployments': typeof AuthUsernameDashDeploymentsIndexRoute
  '/$username/settings': typeof AuthUsernameDashSettingsIndexRoute
  '/$username/deployments/$deploymentId': typeof AuthUsernameDeploymentsDeploymentIdIndexRoute
  '/$username/servers/$owner/$name': typeof AuthUsernameServersOwnerNameServerIndexRoute
  '/$username/servers/private': typeof AuthUsernameDashServersListPrivateRoute
  '/$username/servers/public': typeof AuthUsernameDashServersListPublicRoute
  '/$username/servers/$owner/$name/analytics': typeof AuthUsernameServersOwnerNameServerAnalyticsRoute
  '/$username/servers/$owner/$name/readme': typeof AuthUsernameServersOwnerNameServerReadmeRoute
  '/$username/servers/$owner/$name/settings': typeof AuthUsernameServersOwnerNameServerSettingsRoute
  '/$username/servers/$owner/$name/deploy': typeof AuthUsernameServersOwnerNameDeployIndexRoute
  '/$username/servers/$owner/$name/deployments/preview': typeof AuthUsernameServersOwnerNameServerDeploymentsPreviewRoute
  '/$username/servers/$owner/$name/deployments/production': typeof AuthUsernameServersOwnerNameServerDeploymentsProductionRoute
  '/$username/servers/$owner/$name/deployments': typeof AuthUsernameServersOwnerNameServerDeploymentsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/github/installed': typeof GithubInstalledRoute
  '/login/$': typeof LoginSplatRoute
  '/_auth/': typeof AuthIndexRoute
  '/_auth/$username': typeof AuthUsernameRouteWithChildren
  '/_auth/$username/_dash': typeof AuthUsernameDashRouteRouteWithChildren
  '/_auth/users/$username': typeof AuthUsersUsernameRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/github/callback': typeof ApiGithubCallbackRoute
  '/api/github/installs': typeof ApiGithubInstallsRoute
  '/api/github/repos': typeof ApiGithubReposRoute
  '/api/sync/v1': typeof ApiSyncV1Route
  '/_auth/$username/_dash/settings': typeof AuthUsernameDashSettingsRouteRouteWithChildren
  '/_auth/$username/deployments/$deploymentId': typeof AuthUsernameDeploymentsDeploymentIdRouteRouteWithChildren
  '/_auth/$username/_dash/deployments': typeof AuthUsernameDashDeploymentsRouteWithChildren
  '/_auth/$username/_dash/': typeof AuthUsernameDashIndexRoute
  '/_auth/$username/_dash/servers': typeof AuthUsernameDashServersRouteWithChildren
  '/_auth/$username/_dash/servers/_list': typeof AuthUsernameDashServersListRouteRouteWithChildren
  '/_auth/$username/_dash/deployments/preview': typeof AuthUsernameDashDeploymentsPreviewRoute
  '/_auth/$username/_dash/deployments/production': typeof AuthUsernameDashDeploymentsProductionRoute
  '/_auth/$username/_dash/servers/import': typeof AuthUsernameDashServersImportRoute
  '/_auth/$username/_dash/servers/new': typeof AuthUsernameDashServersNewRoute
  '/_auth/$username/_dash/settings/github': typeof AuthUsernameDashSettingsGithubRoute
  '/_auth/$username/_dash/settings/webhooks': typeof AuthUsernameDashSettingsWebhooksRoute
  '/_auth/$username/deployments/$deploymentId/logs': typeof AuthUsernameDeploymentsDeploymentIdLogsRoute
  '/api/servers/$username/$name/readme': typeof ApiServersUsernameNameReadmeRoute
  '/_auth/$username/_dash/deployments/': typeof AuthUsernameDashDeploymentsIndexRoute
  '/_auth/$username/_dash/settings/': typeof AuthUsernameDashSettingsIndexRoute
  '/_auth/$username/deployments/$deploymentId/': typeof AuthUsernameDeploymentsDeploymentIdIndexRoute
  '/_auth/$username/servers/$owner/$name': typeof AuthUsernameServersOwnerNameRouteWithChildren
  '/_auth/$username/servers/$owner/$name/_server': typeof AuthUsernameServersOwnerNameServerRouteRouteWithChildren
  '/_auth/$username/_dash/servers/_list/private': typeof AuthUsernameDashServersListPrivateRoute
  '/_auth/$username/_dash/servers/_list/public': typeof AuthUsernameDashServersListPublicRoute
  '/_auth/$username/servers/$owner/$name/deploy': typeof AuthUsernameServersOwnerNameDeployRouteWithChildren
  '/_auth/$username/_dash/servers/_list/': typeof AuthUsernameDashServersListIndexRoute
  '/_auth/$username/servers/$owner/$name/_server/analytics': typeof AuthUsernameServersOwnerNameServerAnalyticsRoute
  '/_auth/$username/servers/$owner/$name/_server/deployments': typeof AuthUsernameServersOwnerNameServerDeploymentsRouteWithChildren
  '/_auth/$username/servers/$owner/$name/_server/readme': typeof AuthUsernameServersOwnerNameServerReadmeRoute
  '/_auth/$username/servers/$owner/$name/_server/settings': typeof AuthUsernameServersOwnerNameServerSettingsRoute
  '/_auth/$username/servers/$owner/$name/_server/': typeof AuthUsernameServersOwnerNameServerIndexRoute
  '/_auth/$username/servers/$owner/$name/deploy/': typeof AuthUsernameServersOwnerNameDeployIndexRoute
  '/_auth/$username/servers/$owner/$name/_server/deployments/preview': typeof AuthUsernameServersOwnerNameServerDeploymentsPreviewRoute
  '/_auth/$username/servers/$owner/$name/_server/deployments/production': typeof AuthUsernameServersOwnerNameServerDeploymentsProductionRoute
  '/_auth/$username/servers/$owner/$name/_server/deployments/': typeof AuthUsernameServersOwnerNameServerDeploymentsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/privacy'
    | '/terms'
    | '/github/installed'
    | '/login/$'
    | '/'
    | '/$username'
    | '/users/$username'
    | '/api/auth/$'
    | '/api/github/callback'
    | '/api/github/installs'
    | '/api/github/repos'
    | '/api/sync/v1'
    | '/$username/settings'
    | '/$username/deployments/$deploymentId'
    | '/$username/deployments'
    | '/$username/'
    | '/$username/servers'
    | '/$username/deployments/preview'
    | '/$username/deployments/production'
    | '/$username/servers/import'
    | '/$username/servers/new'
    | '/$username/settings/github'
    | '/$username/settings/webhooks'
    | '/$username/deployments/$deploymentId/logs'
    | '/api/servers/$username/$name/readme'
    | '/$username/deployments/'
    | '/$username/settings/'
    | '/$username/deployments/$deploymentId/'
    | '/$username/servers/$owner/$name'
    | '/$username/servers/private'
    | '/$username/servers/public'
    | '/$username/servers/$owner/$name/deploy'
    | '/$username/servers/'
    | '/$username/servers/$owner/$name/analytics'
    | '/$username/servers/$owner/$name/deployments'
    | '/$username/servers/$owner/$name/readme'
    | '/$username/servers/$owner/$name/settings'
    | '/$username/servers/$owner/$name/'
    | '/$username/servers/$owner/$name/deploy/'
    | '/$username/servers/$owner/$name/deployments/preview'
    | '/$username/servers/$owner/$name/deployments/production'
    | '/$username/servers/$owner/$name/deployments/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/privacy'
    | '/terms'
    | '/github/installed'
    | '/login/$'
    | '/'
    | '/$username'
    | '/users/$username'
    | '/api/auth/$'
    | '/api/github/callback'
    | '/api/github/installs'
    | '/api/github/repos'
    | '/api/sync/v1'
    | '/$username/servers'
    | '/$username/deployments/preview'
    | '/$username/deployments/production'
    | '/$username/servers/import'
    | '/$username/servers/new'
    | '/$username/settings/github'
    | '/$username/settings/webhooks'
    | '/$username/deployments/$deploymentId/logs'
    | '/api/servers/$username/$name/readme'
    | '/$username/deployments'
    | '/$username/settings'
    | '/$username/deployments/$deploymentId'
    | '/$username/servers/$owner/$name'
    | '/$username/servers/private'
    | '/$username/servers/public'
    | '/$username/servers/$owner/$name/analytics'
    | '/$username/servers/$owner/$name/readme'
    | '/$username/servers/$owner/$name/settings'
    | '/$username/servers/$owner/$name/deploy'
    | '/$username/servers/$owner/$name/deployments/preview'
    | '/$username/servers/$owner/$name/deployments/production'
    | '/$username/servers/$owner/$name/deployments'
  id:
    | '__root__'
    | '/_auth'
    | '/privacy'
    | '/terms'
    | '/github/installed'
    | '/login/$'
    | '/_auth/'
    | '/_auth/$username'
    | '/_auth/$username/_dash'
    | '/_auth/users/$username'
    | '/api/auth/$'
    | '/api/github/callback'
    | '/api/github/installs'
    | '/api/github/repos'
    | '/api/sync/v1'
    | '/_auth/$username/_dash/settings'
    | '/_auth/$username/deployments/$deploymentId'
    | '/_auth/$username/_dash/deployments'
    | '/_auth/$username/_dash/'
    | '/_auth/$username/_dash/servers'
    | '/_auth/$username/_dash/servers/_list'
    | '/_auth/$username/_dash/deployments/preview'
    | '/_auth/$username/_dash/deployments/production'
    | '/_auth/$username/_dash/servers/import'
    | '/_auth/$username/_dash/servers/new'
    | '/_auth/$username/_dash/settings/github'
    | '/_auth/$username/_dash/settings/webhooks'
    | '/_auth/$username/deployments/$deploymentId/logs'
    | '/api/servers/$username/$name/readme'
    | '/_auth/$username/_dash/deployments/'
    | '/_auth/$username/_dash/settings/'
    | '/_auth/$username/deployments/$deploymentId/'
    | '/_auth/$username/servers/$owner/$name'
    | '/_auth/$username/servers/$owner/$name/_server'
    | '/_auth/$username/_dash/servers/_list/private'
    | '/_auth/$username/_dash/servers/_list/public'
    | '/_auth/$username/servers/$owner/$name/deploy'
    | '/_auth/$username/_dash/servers/_list/'
    | '/_auth/$username/servers/$owner/$name/_server/analytics'
    | '/_auth/$username/servers/$owner/$name/_server/deployments'
    | '/_auth/$username/servers/$owner/$name/_server/readme'
    | '/_auth/$username/servers/$owner/$name/_server/settings'
    | '/_auth/$username/servers/$owner/$name/_server/'
    | '/_auth/$username/servers/$owner/$name/deploy/'
    | '/_auth/$username/servers/$owner/$name/_server/deployments/preview'
    | '/_auth/$username/servers/$owner/$name/_server/deployments/production'
    | '/_auth/$username/servers/$owner/$name/_server/deployments/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  GithubInstalledRoute: typeof GithubInstalledRoute
  LoginSplatRoute: typeof LoginSplatRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiGithubCallbackRoute: typeof ApiGithubCallbackRoute
  ApiGithubInstallsRoute: typeof ApiGithubInstallsRoute
  ApiGithubReposRoute: typeof ApiGithubReposRoute
  ApiSyncV1Route: typeof ApiSyncV1Route
  ApiServersUsernameNameReadmeRoute: typeof ApiServersUsernameNameReadmeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/$username': {
      id: '/_auth/$username'
      path: '/$username'
      fullPath: '/$username'
      preLoaderRoute: typeof AuthUsernameRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/login/$': {
      id: '/login/$'
      path: '/login/$'
      fullPath: '/login/$'
      preLoaderRoute: typeof LoginSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/github/installed': {
      id: '/github/installed'
      path: '/github/installed'
      fullPath: '/github/installed'
      preLoaderRoute: typeof GithubInstalledRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/sync/v1': {
      id: '/api/sync/v1'
      path: '/api/sync/v1'
      fullPath: '/api/sync/v1'
      preLoaderRoute: typeof ApiSyncV1RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/github/repos': {
      id: '/api/github/repos'
      path: '/api/github/repos'
      fullPath: '/api/github/repos'
      preLoaderRoute: typeof ApiGithubReposRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/github/installs': {
      id: '/api/github/installs'
      path: '/api/github/installs'
      fullPath: '/api/github/installs'
      preLoaderRoute: typeof ApiGithubInstallsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/github/callback': {
      id: '/api/github/callback'
      path: '/api/github/callback'
      fullPath: '/api/github/callback'
      preLoaderRoute: typeof ApiGithubCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/users/$username': {
      id: '/_auth/users/$username'
      path: '/users/$username'
      fullPath: '/users/$username'
      preLoaderRoute: typeof AuthUsersUsernameRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/$username/_dash': {
      id: '/_auth/$username/_dash'
      path: '/$username'
      fullPath: '/$username'
      preLoaderRoute: typeof AuthUsernameDashRouteRouteImport
      parentRoute: typeof AuthUsernameRoute
    }
    '/_auth/$username/_dash/servers': {
      id: '/_auth/$username/_dash/servers'
      path: '/servers'
      fullPath: '/$username/servers'
      preLoaderRoute: typeof AuthUsernameDashServersRouteImport
      parentRoute: typeof AuthUsernameDashRouteRoute
    }
    '/_auth/$username/_dash/': {
      id: '/_auth/$username/_dash/'
      path: '/'
      fullPath: '/$username/'
      preLoaderRoute: typeof AuthUsernameDashIndexRouteImport
      parentRoute: typeof AuthUsernameDashRouteRoute
    }
    '/_auth/$username/_dash/deployments': {
      id: '/_auth/$username/_dash/deployments'
      path: '/deployments'
      fullPath: '/$username/deployments'
      preLoaderRoute: typeof AuthUsernameDashDeploymentsRouteImport
      parentRoute: typeof AuthUsernameDashRouteRoute
    }
    '/_auth/$username/deployments/$deploymentId': {
      id: '/_auth/$username/deployments/$deploymentId'
      path: '/deployments/$deploymentId'
      fullPath: '/$username/deployments/$deploymentId'
      preLoaderRoute: typeof AuthUsernameDeploymentsDeploymentIdRouteRouteImport
      parentRoute: typeof AuthUsernameRoute
    }
    '/_auth/$username/_dash/settings': {
      id: '/_auth/$username/_dash/settings'
      path: '/settings'
      fullPath: '/$username/settings'
      preLoaderRoute: typeof AuthUsernameDashSettingsRouteRouteImport
      parentRoute: typeof AuthUsernameDashRouteRoute
    }
    '/_auth/$username/servers/$owner/$name': {
      id: '/_auth/$username/servers/$owner/$name'
      path: '/servers/$owner/$name'
      fullPath: '/$username/servers/$owner/$name'
      preLoaderRoute: typeof AuthUsernameServersOwnerNameRouteImport
      parentRoute: typeof AuthUsernameRoute
    }
    '/_auth/$username/deployments/$deploymentId/': {
      id: '/_auth/$username/deployments/$deploymentId/'
      path: '/'
      fullPath: '/$username/deployments/$deploymentId/'
      preLoaderRoute: typeof AuthUsernameDeploymentsDeploymentIdIndexRouteImport
      parentRoute: typeof AuthUsernameDeploymentsDeploymentIdRouteRoute
    }
    '/_auth/$username/_dash/settings/': {
      id: '/_auth/$username/_dash/settings/'
      path: '/'
      fullPath: '/$username/settings/'
      preLoaderRoute: typeof AuthUsernameDashSettingsIndexRouteImport
      parentRoute: typeof AuthUsernameDashSettingsRouteRoute
    }
    '/_auth/$username/_dash/deployments/': {
      id: '/_auth/$username/_dash/deployments/'
      path: '/'
      fullPath: '/$username/deployments/'
      preLoaderRoute: typeof AuthUsernameDashDeploymentsIndexRouteImport
      parentRoute: typeof AuthUsernameDashDeploymentsRoute
    }
    '/api/servers/$username/$name/readme': {
      id: '/api/servers/$username/$name/readme'
      path: '/api/servers/$username/$name/readme'
      fullPath: '/api/servers/$username/$name/readme'
      preLoaderRoute: typeof ApiServersUsernameNameReadmeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/$username/deployments/$deploymentId/logs': {
      id: '/_auth/$username/deployments/$deploymentId/logs'
      path: '/logs'
      fullPath: '/$username/deployments/$deploymentId/logs'
      preLoaderRoute: typeof AuthUsernameDeploymentsDeploymentIdLogsRouteImport
      parentRoute: typeof AuthUsernameDeploymentsDeploymentIdRouteRoute
    }
    '/_auth/$username/_dash/settings/webhooks': {
      id: '/_auth/$username/_dash/settings/webhooks'
      path: '/webhooks'
      fullPath: '/$username/settings/webhooks'
      preLoaderRoute: typeof AuthUsernameDashSettingsWebhooksRouteImport
      parentRoute: typeof AuthUsernameDashSettingsRouteRoute
    }
    '/_auth/$username/_dash/settings/github': {
      id: '/_auth/$username/_dash/settings/github'
      path: '/github'
      fullPath: '/$username/settings/github'
      preLoaderRoute: typeof AuthUsernameDashSettingsGithubRouteImport
      parentRoute: typeof AuthUsernameDashSettingsRouteRoute
    }
    '/_auth/$username/_dash/servers/new': {
      id: '/_auth/$username/_dash/servers/new'
      path: '/new'
      fullPath: '/$username/servers/new'
      preLoaderRoute: typeof AuthUsernameDashServersNewRouteImport
      parentRoute: typeof AuthUsernameDashServersRoute
    }
    '/_auth/$username/_dash/servers/import': {
      id: '/_auth/$username/_dash/servers/import'
      path: '/import'
      fullPath: '/$username/servers/import'
      preLoaderRoute: typeof AuthUsernameDashServersImportRouteImport
      parentRoute: typeof AuthUsernameDashServersRoute
    }
    '/_auth/$username/_dash/deployments/production': {
      id: '/_auth/$username/_dash/deployments/production'
      path: '/production'
      fullPath: '/$username/deployments/production'
      preLoaderRoute: typeof AuthUsernameDashDeploymentsProductionRouteImport
      parentRoute: typeof AuthUsernameDashDeploymentsRoute
    }
    '/_auth/$username/_dash/deployments/preview': {
      id: '/_auth/$username/_dash/deployments/preview'
      path: '/preview'
      fullPath: '/$username/deployments/preview'
      preLoaderRoute: typeof AuthUsernameDashDeploymentsPreviewRouteImport
      parentRoute: typeof AuthUsernameDashDeploymentsRoute
    }
    '/_auth/$username/_dash/servers/_list': {
      id: '/_auth/$username/_dash/servers/_list'
      path: '/servers'
      fullPath: '/$username/servers'
      preLoaderRoute: typeof AuthUsernameDashServersListRouteRouteImport
      parentRoute: typeof AuthUsernameDashServersRoute
    }
    '/_auth/$username/_dash/servers/_list/': {
      id: '/_auth/$username/_dash/servers/_list/'
      path: '/'
      fullPath: '/$username/servers/'
      preLoaderRoute: typeof AuthUsernameDashServersListIndexRouteImport
      parentRoute: typeof AuthUsernameDashServersListRouteRoute
    }
    '/_auth/$username/servers/$owner/$name/deploy': {
      id: '/_auth/$username/servers/$owner/$name/deploy'
      path: '/deploy'
      fullPath: '/$username/servers/$owner/$name/deploy'
      preLoaderRoute: typeof AuthUsernameServersOwnerNameDeployRouteImport
      parentRoute: typeof AuthUsernameServersOwnerNameRoute
    }
    '/_auth/$username/_dash/servers/_list/public': {
      id: '/_auth/$username/_dash/servers/_list/public'
      path: '/public'
      fullPath: '/$username/servers/public'
      preLoaderRoute: typeof AuthUsernameDashServersListPublicRouteImport
      parentRoute: typeof AuthUsernameDashServersListRouteRoute
    }
    '/_auth/$username/_dash/servers/_list/private': {
      id: '/_auth/$username/_dash/servers/_list/private'
      path: '/private'
      fullPath: '/$username/servers/private'
      preLoaderRoute: typeof AuthUsernameDashServersListPrivateRouteImport
      parentRoute: typeof AuthUsernameDashServersListRouteRoute
    }
    '/_auth/$username/servers/$owner/$name/_server': {
      id: '/_auth/$username/servers/$owner/$name/_server'
      path: '/servers/$owner/$name'
      fullPath: '/$username/servers/$owner/$name'
      preLoaderRoute: typeof AuthUsernameServersOwnerNameServerRouteRouteImport
      parentRoute: typeof AuthUsernameServersOwnerNameRoute
    }
    '/_auth/$username/servers/$owner/$name/deploy/': {
      id: '/_auth/$username/servers/$owner/$name/deploy/'
      path: '/'
      fullPath: '/$username/servers/$owner/$name/deploy/'
      preLoaderRoute: typeof AuthUsernameServersOwnerNameDeployIndexRouteImport
      parentRoute: typeof AuthUsernameServersOwnerNameDeployRoute
    }
    '/_auth/$username/servers/$owner/$name/_server/': {
      id: '/_auth/$username/servers/$owner/$name/_server/'
      path: '/'
      fullPath: '/$username/servers/$owner/$name/'
      preLoaderRoute: typeof AuthUsernameServersOwnerNameServerIndexRouteImport
      parentRoute: typeof AuthUsernameServersOwnerNameServerRouteRoute
    }
    '/_auth/$username/servers/$owner/$name/_server/settings': {
      id: '/_auth/$username/servers/$owner/$name/_server/settings'
      path: '/settings'
      fullPath: '/$username/servers/$owner/$name/settings'
      preLoaderRoute: typeof AuthUsernameServersOwnerNameServerSettingsRouteImport
      parentRoute: typeof AuthUsernameServersOwnerNameServerRouteRoute
    }
    '/_auth/$username/servers/$owner/$name/_server/readme': {
      id: '/_auth/$username/servers/$owner/$name/_server/readme'
      path: '/readme'
      fullPath: '/$username/servers/$owner/$name/readme'
      preLoaderRoute: typeof AuthUsernameServersOwnerNameServerReadmeRouteImport
      parentRoute: typeof AuthUsernameServersOwnerNameServerRouteRoute
    }
    '/_auth/$username/servers/$owner/$name/_server/deployments': {
      id: '/_auth/$username/servers/$owner/$name/_server/deployments'
      path: '/deployments'
      fullPath: '/$username/servers/$owner/$name/deployments'
      preLoaderRoute: typeof AuthUsernameServersOwnerNameServerDeploymentsRouteImport
      parentRoute: typeof AuthUsernameServersOwnerNameServerRouteRoute
    }
    '/_auth/$username/servers/$owner/$name/_server/analytics': {
      id: '/_auth/$username/servers/$owner/$name/_server/analytics'
      path: '/analytics'
      fullPath: '/$username/servers/$owner/$name/analytics'
      preLoaderRoute: typeof AuthUsernameServersOwnerNameServerAnalyticsRouteImport
      parentRoute: typeof AuthUsernameServersOwnerNameServerRouteRoute
    }
    '/_auth/$username/servers/$owner/$name/_server/deployments/': {
      id: '/_auth/$username/servers/$owner/$name/_server/deployments/'
      path: '/'
      fullPath: '/$username/servers/$owner/$name/deployments/'
      preLoaderRoute: typeof AuthUsernameServersOwnerNameServerDeploymentsIndexRouteImport
      parentRoute: typeof AuthUsernameServersOwnerNameServerDeploymentsRoute
    }
    '/_auth/$username/servers/$owner/$name/_server/deployments/production': {
      id: '/_auth/$username/servers/$owner/$name/_server/deployments/production'
      path: '/production'
      fullPath: '/$username/servers/$owner/$name/deployments/production'
      preLoaderRoute: typeof AuthUsernameServersOwnerNameServerDeploymentsProductionRouteImport
      parentRoute: typeof AuthUsernameServersOwnerNameServerDeploymentsRoute
    }
    '/_auth/$username/servers/$owner/$name/_server/deployments/preview': {
      id: '/_auth/$username/servers/$owner/$name/_server/deployments/preview'
      path: '/preview'
      fullPath: '/$username/servers/$owner/$name/deployments/preview'
      preLoaderRoute: typeof AuthUsernameServersOwnerNameServerDeploymentsPreviewRouteImport
      parentRoute: typeof AuthUsernameServersOwnerNameServerDeploymentsRoute
    }
  }
}

interface AuthUsernameDashSettingsRouteRouteChildren {
  AuthUsernameDashSettingsGithubRoute: typeof AuthUsernameDashSettingsGithubRoute
  AuthUsernameDashSettingsWebhooksRoute: typeof AuthUsernameDashSettingsWebhooksRoute
  AuthUsernameDashSettingsIndexRoute: typeof AuthUsernameDashSettingsIndexRoute
}

const AuthUsernameDashSettingsRouteRouteChildren: AuthUsernameDashSettingsRouteRouteChildren =
  {
    AuthUsernameDashSettingsGithubRoute: AuthUsernameDashSettingsGithubRoute,
    AuthUsernameDashSettingsWebhooksRoute:
      AuthUsernameDashSettingsWebhooksRoute,
    AuthUsernameDashSettingsIndexRoute: AuthUsernameDashSettingsIndexRoute,
  }

const AuthUsernameDashSettingsRouteRouteWithChildren =
  AuthUsernameDashSettingsRouteRoute._addFileChildren(
    AuthUsernameDashSettingsRouteRouteChildren,
  )

interface AuthUsernameDashDeploymentsRouteChildren {
  AuthUsernameDashDeploymentsPreviewRoute: typeof AuthUsernameDashDeploymentsPreviewRoute
  AuthUsernameDashDeploymentsProductionRoute: typeof AuthUsernameDashDeploymentsProductionRoute
  AuthUsernameDashDeploymentsIndexRoute: typeof AuthUsernameDashDeploymentsIndexRoute
}

const AuthUsernameDashDeploymentsRouteChildren: AuthUsernameDashDeploymentsRouteChildren =
  {
    AuthUsernameDashDeploymentsPreviewRoute:
      AuthUsernameDashDeploymentsPreviewRoute,
    AuthUsernameDashDeploymentsProductionRoute:
      AuthUsernameDashDeploymentsProductionRoute,
    AuthUsernameDashDeploymentsIndexRoute:
      AuthUsernameDashDeploymentsIndexRoute,
  }

const AuthUsernameDashDeploymentsRouteWithChildren =
  AuthUsernameDashDeploymentsRoute._addFileChildren(
    AuthUsernameDashDeploymentsRouteChildren,
  )

interface AuthUsernameDashServersListRouteRouteChildren {
  AuthUsernameDashServersListPrivateRoute: typeof AuthUsernameDashServersListPrivateRoute
  AuthUsernameDashServersListPublicRoute: typeof AuthUsernameDashServersListPublicRoute
  AuthUsernameDashServersListIndexRoute: typeof AuthUsernameDashServersListIndexRoute
}

const AuthUsernameDashServersListRouteRouteChildren: AuthUsernameDashServersListRouteRouteChildren =
  {
    AuthUsernameDashServersListPrivateRoute:
      AuthUsernameDashServersListPrivateRoute,
    AuthUsernameDashServersListPublicRoute:
      AuthUsernameDashServersListPublicRoute,
    AuthUsernameDashServersListIndexRoute:
      AuthUsernameDashServersListIndexRoute,
  }

const AuthUsernameDashServersListRouteRouteWithChildren =
  AuthUsernameDashServersListRouteRoute._addFileChildren(
    AuthUsernameDashServersListRouteRouteChildren,
  )

interface AuthUsernameDashServersRouteChildren {
  AuthUsernameDashServersListRouteRoute: typeof AuthUsernameDashServersListRouteRouteWithChildren
  AuthUsernameDashServersImportRoute: typeof AuthUsernameDashServersImportRoute
  AuthUsernameDashServersNewRoute: typeof AuthUsernameDashServersNewRoute
}

const AuthUsernameDashServersRouteChildren: AuthUsernameDashServersRouteChildren =
  {
    AuthUsernameDashServersListRouteRoute:
      AuthUsernameDashServersListRouteRouteWithChildren,
    AuthUsernameDashServersImportRoute: AuthUsernameDashServersImportRoute,
    AuthUsernameDashServersNewRoute: AuthUsernameDashServersNewRoute,
  }

const AuthUsernameDashServersRouteWithChildren =
  AuthUsernameDashServersRoute._addFileChildren(
    AuthUsernameDashServersRouteChildren,
  )

interface AuthUsernameDashRouteRouteChildren {
  AuthUsernameDashSettingsRouteRoute: typeof AuthUsernameDashSettingsRouteRouteWithChildren
  AuthUsernameDashDeploymentsRoute: typeof AuthUsernameDashDeploymentsRouteWithChildren
  AuthUsernameDashIndexRoute: typeof AuthUsernameDashIndexRoute
  AuthUsernameDashServersRoute: typeof AuthUsernameDashServersRouteWithChildren
}

const AuthUsernameDashRouteRouteChildren: AuthUsernameDashRouteRouteChildren = {
  AuthUsernameDashSettingsRouteRoute:
    AuthUsernameDashSettingsRouteRouteWithChildren,
  AuthUsernameDashDeploymentsRoute:
    AuthUsernameDashDeploymentsRouteWithChildren,
  AuthUsernameDashIndexRoute: AuthUsernameDashIndexRoute,
  AuthUsernameDashServersRoute: AuthUsernameDashServersRouteWithChildren,
}

const AuthUsernameDashRouteRouteWithChildren =
  AuthUsernameDashRouteRoute._addFileChildren(
    AuthUsernameDashRouteRouteChildren,
  )

interface AuthUsernameDeploymentsDeploymentIdRouteRouteChildren {
  AuthUsernameDeploymentsDeploymentIdLogsRoute: typeof AuthUsernameDeploymentsDeploymentIdLogsRoute
  AuthUsernameDeploymentsDeploymentIdIndexRoute: typeof AuthUsernameDeploymentsDeploymentIdIndexRoute
}

const AuthUsernameDeploymentsDeploymentIdRouteRouteChildren: AuthUsernameDeploymentsDeploymentIdRouteRouteChildren =
  {
    AuthUsernameDeploymentsDeploymentIdLogsRoute:
      AuthUsernameDeploymentsDeploymentIdLogsRoute,
    AuthUsernameDeploymentsDeploymentIdIndexRoute:
      AuthUsernameDeploymentsDeploymentIdIndexRoute,
  }

const AuthUsernameDeploymentsDeploymentIdRouteRouteWithChildren =
  AuthUsernameDeploymentsDeploymentIdRouteRoute._addFileChildren(
    AuthUsernameDeploymentsDeploymentIdRouteRouteChildren,
  )

interface AuthUsernameServersOwnerNameServerDeploymentsRouteChildren {
  AuthUsernameServersOwnerNameServerDeploymentsPreviewRoute: typeof AuthUsernameServersOwnerNameServerDeploymentsPreviewRoute
  AuthUsernameServersOwnerNameServerDeploymentsProductionRoute: typeof AuthUsernameServersOwnerNameServerDeploymentsProductionRoute
  AuthUsernameServersOwnerNameServerDeploymentsIndexRoute: typeof AuthUsernameServersOwnerNameServerDeploymentsIndexRoute
}

const AuthUsernameServersOwnerNameServerDeploymentsRouteChildren: AuthUsernameServersOwnerNameServerDeploymentsRouteChildren =
  {
    AuthUsernameServersOwnerNameServerDeploymentsPreviewRoute:
      AuthUsernameServersOwnerNameServerDeploymentsPreviewRoute,
    AuthUsernameServersOwnerNameServerDeploymentsProductionRoute:
      AuthUsernameServersOwnerNameServerDeploymentsProductionRoute,
    AuthUsernameServersOwnerNameServerDeploymentsIndexRoute:
      AuthUsernameServersOwnerNameServerDeploymentsIndexRoute,
  }

const AuthUsernameServersOwnerNameServerDeploymentsRouteWithChildren =
  AuthUsernameServersOwnerNameServerDeploymentsRoute._addFileChildren(
    AuthUsernameServersOwnerNameServerDeploymentsRouteChildren,
  )

interface AuthUsernameServersOwnerNameServerRouteRouteChildren {
  AuthUsernameServersOwnerNameServerAnalyticsRoute: typeof AuthUsernameServersOwnerNameServerAnalyticsRoute
  AuthUsernameServersOwnerNameServerDeploymentsRoute: typeof AuthUsernameServersOwnerNameServerDeploymentsRouteWithChildren
  AuthUsernameServersOwnerNameServerReadmeRoute: typeof AuthUsernameServersOwnerNameServerReadmeRoute
  AuthUsernameServersOwnerNameServerSettingsRoute: typeof AuthUsernameServersOwnerNameServerSettingsRoute
  AuthUsernameServersOwnerNameServerIndexRoute: typeof AuthUsernameServersOwnerNameServerIndexRoute
}

const AuthUsernameServersOwnerNameServerRouteRouteChildren: AuthUsernameServersOwnerNameServerRouteRouteChildren =
  {
    AuthUsernameServersOwnerNameServerAnalyticsRoute:
      AuthUsernameServersOwnerNameServerAnalyticsRoute,
    AuthUsernameServersOwnerNameServerDeploymentsRoute:
      AuthUsernameServersOwnerNameServerDeploymentsRouteWithChildren,
    AuthUsernameServersOwnerNameServerReadmeRoute:
      AuthUsernameServersOwnerNameServerReadmeRoute,
    AuthUsernameServersOwnerNameServerSettingsRoute:
      AuthUsernameServersOwnerNameServerSettingsRoute,
    AuthUsernameServersOwnerNameServerIndexRoute:
      AuthUsernameServersOwnerNameServerIndexRoute,
  }

const AuthUsernameServersOwnerNameServerRouteRouteWithChildren =
  AuthUsernameServersOwnerNameServerRouteRoute._addFileChildren(
    AuthUsernameServersOwnerNameServerRouteRouteChildren,
  )

interface AuthUsernameServersOwnerNameDeployRouteChildren {
  AuthUsernameServersOwnerNameDeployIndexRoute: typeof AuthUsernameServersOwnerNameDeployIndexRoute
}

const AuthUsernameServersOwnerNameDeployRouteChildren: AuthUsernameServersOwnerNameDeployRouteChildren =
  {
    AuthUsernameServersOwnerNameDeployIndexRoute:
      AuthUsernameServersOwnerNameDeployIndexRoute,
  }

const AuthUsernameServersOwnerNameDeployRouteWithChildren =
  AuthUsernameServersOwnerNameDeployRoute._addFileChildren(
    AuthUsernameServersOwnerNameDeployRouteChildren,
  )

interface AuthUsernameServersOwnerNameRouteChildren {
  AuthUsernameServersOwnerNameServerRouteRoute: typeof AuthUsernameServersOwnerNameServerRouteRouteWithChildren
  AuthUsernameServersOwnerNameDeployRoute: typeof AuthUsernameServersOwnerNameDeployRouteWithChildren
}

const AuthUsernameServersOwnerNameRouteChildren: AuthUsernameServersOwnerNameRouteChildren =
  {
    AuthUsernameServersOwnerNameServerRouteRoute:
      AuthUsernameServersOwnerNameServerRouteRouteWithChildren,
    AuthUsernameServersOwnerNameDeployRoute:
      AuthUsernameServersOwnerNameDeployRouteWithChildren,
  }

const AuthUsernameServersOwnerNameRouteWithChildren =
  AuthUsernameServersOwnerNameRoute._addFileChildren(
    AuthUsernameServersOwnerNameRouteChildren,
  )

interface AuthUsernameRouteChildren {
  AuthUsernameDashRouteRoute: typeof AuthUsernameDashRouteRouteWithChildren
  AuthUsernameDeploymentsDeploymentIdRouteRoute: typeof AuthUsernameDeploymentsDeploymentIdRouteRouteWithChildren
  AuthUsernameServersOwnerNameRoute: typeof AuthUsernameServersOwnerNameRouteWithChildren
}

const AuthUsernameRouteChildren: AuthUsernameRouteChildren = {
  AuthUsernameDashRouteRoute: AuthUsernameDashRouteRouteWithChildren,
  AuthUsernameDeploymentsDeploymentIdRouteRoute:
    AuthUsernameDeploymentsDeploymentIdRouteRouteWithChildren,
  AuthUsernameServersOwnerNameRoute:
    AuthUsernameServersOwnerNameRouteWithChildren,
}

const AuthUsernameRouteWithChildren = AuthUsernameRoute._addFileChildren(
  AuthUsernameRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthIndexRoute: typeof AuthIndexRoute
  AuthUsernameRoute: typeof AuthUsernameRouteWithChildren
  AuthUsersUsernameRoute: typeof AuthUsersUsernameRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthIndexRoute: AuthIndexRoute,
  AuthUsernameRoute: AuthUsernameRouteWithChildren,
  AuthUsersUsernameRoute: AuthUsersUsernameRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  GithubInstalledRoute: GithubInstalledRoute,
  LoginSplatRoute: LoginSplatRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiGithubCallbackRoute: ApiGithubCallbackRoute,
  ApiGithubInstallsRoute: ApiGithubInstallsRoute,
  ApiGithubReposRoute: ApiGithubReposRoute,
  ApiSyncV1Route: ApiSyncV1Route,
  ApiServersUsernameNameReadmeRoute: ApiServersUsernameNameReadmeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
